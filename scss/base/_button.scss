/// Default background color for buttons.
///
/// @type Color
$button-background: $grey !default;

/// Background color on hover for buttons.
///
/// @type Color
$button-background-hover: scale-color($button-background, $lightness: -15%) !default;

/// Font color for buttons.
///
/// @type Color
$button-color: $white !default;

/// Alternative font color for buttons.
///
/// @type Color
$button-color-alt: $black !default;

/// Font size for default buttons.
///
/// @type Number
$button-font-size: rem-calc(14) !default;

/// Padding for default buttons.
///
/// @type Number
$button-padding: rem-calc(10 12) !default;

/// Line height for default buttons.
///
/// @type Number
$button-line-height: 1.5 !default;

/// Styles for buttons
///
/// @type Map
$button-sizes: (
  small: (
    font-size: rem-calc(12),
    padding: rem-calc(8 9)
  ),
  medium: (
    font-size: rem-calc(16),
    padding: rem-calc(12 14)
  ),
  large: (
    font-size: rem-calc(20),
    padding: rem-calc(20 17)
  )
) !default;

/// Margin around buttons.
///
/// @type List
$button-margin: 0 0 $base-margin 0 !default;

/// Border for buttons
///
/// @type Border
/// @todo I'm not sure if we need it...
$button-border: 1px solid transparent !default;

/// Border radius for buttons, defaulted to base-radius.
///
/// @type Number
$button-radius: $base-radius !default;

/// Background color lightness on hover for buttons.
///
/// @type Number
$button-background-hover-lightness: -20% !default;

/// Transitions for buttons.
///
/// @type List
$button-transition: background-color 0.25s ease-out, color 0.25s ease-out !default;

/// Mouse cursor for disabled button.
///
/// @type Keyword
$button-cursor-disabled: not-allowed;

/// Opacity for a disabled button.
///
/// @type List
$button-opacity-disabled: $base-opacity-disabled !default;

/// Sets default style of a button.
@mixin button-base {
  border: $button-border;
  border-radius: $button-radius;
  cursor: pointer;
  display: inline-block;
  font-size: $button-font-size;
  line-height: $button-line-height;
  margin: $button-margin;
  padding: $button-padding;
  text-align: center;
  vertical-align: middle;
  -webkit-appearance: none;

  @if has-value($button-transition) {
    transition: $button-transition;
  }
}

/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
/// @param {Number} $background-hover-lightness [$button-background-hover-lightness] - @todo Must be documented...
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness
) {
  @if $color == auto {
    $color: foreground-color($background, $button-color-alt, $button-color);
  }

  @if $background-hover == auto {
    $background-hover: scale-color($background, $lightness: $background-hover-lightness);
  }

  background-color: $background;
  color: $color;

  // Hover / Active state
  &.active,
  &:hover,
  &:focus {
    background-color: $background-hover;
    color: $color;
  }

  // Disabled state
  &.disabled,
  &[disabled] {
    background-color: $background;
    color: $color;
  }
}

/// @todo Must be documented...
@mixin button-outline-style(
  $color: $button-background,
  $color-hover: $button-background-hover,
  $background-hover-lightness: $button-background-hover-lightness
) {
  @if $color-hover == auto {
    $color-hover: scale-color($color, $lightness: $background-hover-lightness);
  }

  background-color: transparent;
  border: 1px solid $color;
  color: $color;

  // Hover / Active state
  &.active,
  &:hover,
  &:focus {
    background-color: transparent;
    border: 1px solid $color-hover;
    color: $color-hover;
  }

  // Disabled state
  &.disabled,
  &[disabled] {
    border: 1px solid $color;
    color: $color;
  }
}

@mixin button {

  button,
  .button {
    @include button-base;
    @include button-style($color: auto);

    // Sizes
    @each $size, $button-size in map-remove($button-sizes, default) {
      &.#{$size} {
        @each $property, $value in $button-size {
          #{$property}: $value;
        }
      }
    }

    // Expanded
    &.expanded {
      display: block;
      width: 100%;
      margin-right: 0;
      margin-left: 0;
    }

    // Disabled state
    &.disabled,
    &[disabled] {
      cursor: $button-cursor-disabled;
      opacity: $button-opacity-disabled;
    }

    // Colors
    &.primary { @include button-style($primary-color, auto, auto); }

    &.info { @include button-style($info-color, auto, auto); }

    &.success { @include button-style($success-color, auto, auto); }

    &.warning { @include button-style($warning-color, auto, auto); }

    &.danger { @include button-style($danger-color, auto, auto); }

    &.link {
      background-color: transparent;
      color: $anchor-color;

      &.active:not(.disabled):not([disabled]),
      &:hover:not(.disabled):not([disabled]),
      &:focus:not(.disabled):not([disabled]) {
        background-color: inherit;
        color: $anchor-color-hover;
      }
    }

    // Outline style
    &.outlined {
      @include button-outline-style;

      &.primary { @include button-outline-style($primary-color, auto); }

      &.info { @include button-outline-style($info-color, auto); }

      &.success { @include button-outline-style($success-color, auto); }

      &.warning { @include button-outline-style($warning-color, auto); }

      &.danger { @include button-outline-style($danger-color, auto); }
    }
  }
}
