/// The maximum width of a row.
///
/// @type Number
$grid-row-width: $base-width !default;

/// The default column count of a grid. Changing this value affects the logic of the grid mixins, and the number of CSS classes output.
///
/// @type Number
$grid-column-count: 12 !default;

/// The amount of space between columns at different screen sizes.
///
/// @type Map | Number
$grid-column-gutter: (
    small: 20px,
    medium: 30px
) !default;

$flex-justify: (
  'left': flex-start,
  'right': flex-end,
  'center': center,
  'justify': space-between,
  'spaced': space-around,
);

$flex-align: (
  'top': flex-start,
  'bottom': flex-end,
  'middle': center,
  'stretch': stretch,
);

$flex-direction: (
  'row': row,
  'row-reverse': row-reverse,
  'column': column,
  'column-reverse': column-reverse,
);

@mixin grid-row-nest-gutter($gutter: $grid-column-gutter) {
    @if type-of($gutter) == 'map' {
        @each $breakpoint, $value in $gutter {
            @if strip-unit($value) > 0 {
                $margin: rem-calc($value) / 2 * -1;

                @include breakpoint-up($breakpoint) {
                    margin-right: $margin;
                    margin-left: $margin;
                }
            }
        }
    } @else if type-of($gutter) == 'number' and strip-unit($gutter) > 0 {
        $margin: rem-calc($gutter) / 2 * -1;
        margin-right: $margin;
        margin-left: $margin;
    }
}

@mixin grid-column($columns: expand) {
    @if $columns == expand {
        flex: 1 1 0px;
        min-width: initial;
    } @else if ($columns == shrink) {
        flex: 0 0 auto;
        max-width: 100%;
    } @else {
        flex: 0 0 percentage($columns / $grid-column-count);
        max-width: percentage($columns / $grid-column-count)
    }

}

@mixin grid-column-gutter($gutter: $grid-column-gutter) {
    @if type-of($gutter) == 'map' {
        @each $breakpoint, $value in $gutter {
            @if strip-unit($value) > 0 {
                $padding: rem-calc($value) / 2;

                @include breakpoint-up($breakpoint) {
                    padding-left: $padding;
                    padding-right: $padding;
                }
            }
        }
    } @else if type-of($gutter) == 'number' and strip-unit($gutter) > 0 {
        $padding: rem-calc($gutter) / 2;
        padding-left: $padding;
        padding-right: $padding;
    }
}

/// Horizontally or vertically aligns the items within a flex container.
///
/// @param {Keyword} $x [null] - Horizontal alignment to use. Can be `left`, `right`, `center`, `justify`, or `spaced`. Or, set it to `null` (the default) to not set horizontal alignment.
/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.
@mixin flex-align($x: null, $y: null) {
    @if $x {
        @if map-has-key($flex-justify, $x) {
            $x: map-get($flex-justify, $x);
        }
        @else {
            @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';
        }
    }

    @if $y {
        @if map-has-key($flex-align, $y) {
            $y: map-get($flex-align, $y);
        }
        @else {
            @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';
        }
    }

    justify-content: $x;
    align-items: $y;
}

/// Vertically align a single column within a flex row. Apply this mixin to a flex column.
///
/// @param {Keyword} $y [null] - Vertical alignment to use. Can be `top`, `bottom`, `middle`, or `stretch`. Or, set it to `null` (the default) to not set vertical alignment.
@mixin flex-align-self($y: null) {
    @if $y {
        @if map-has-key($flex-align, $y) {
            $y: map-get($flex-align, $y);
        }
        @else {
            @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';
        }
    }

    align-self: $y;
}

@mixin grid() {

    .row {
        display: flex;
        flex-flow: row wrap;
        max-width: $grid-row-width;
        margin-right: auto;
        margin-left: auto;

        // Nesting
        & & {
            @include grid-row-nest-gutter;
        }

        // Collapsing
        &.collapse > .column {
            padding-left: 0;
            padding-right: 0;
        }

        // Expanding
        &.expanded,
        &.expanded .row {
            max-width: none;
        }
    }

    .column {
        @include grid-column;
        @include grid-column-gutter;

        // Sizing
        &.shrink {
            @include grid-column(shrink);
        }
    }

    @each $breakpoint in map-keys($breakpoints) {
        @include breakpoint-up($breakpoint) {
            @for $i from 1 through $grid-column-count {
                // Sizing
                .#{$breakpoint}-#{$i} {
                    @include grid-column($i);
                }
            }
        }
    }

    // Horizontal alignment using justify-content
    @each $hdir, $prop in map-remove($flex-justify, left) {
        .align-#{$hdir} {
            @include flex-align($x: $hdir);
        }
    }

    // Vertical alignment using align-items and align-self
    @each $vdir, $prop in $flex-align {
        .align-#{$vdir} {
            @include flex-align($y: $vdir);
        }

        .align-self-#{$vdir} {
            @include flex-align-self($y: $vdir);
        }
    }
}
